// schemas.ts
import { z } from 'zod';

// --- Reusable Preprocessors ---

// Pre-process a comma or pipe-separated string into an array of strings. Handles empty strings and existing arrays gracefully.
const stringToArray = z.preprocess(
  (val) => (typeof val === 'string' && val.length > 0 ? val.split(/[,|]/).map(s => s.trim()) : Array.isArray(val) ? val : []),
  z.array(z.string()).optional()
);

// Coerce values to a number, treating empty strings, null, or undefined as undefined. This makes numeric fields optional.
const optionalNumber = z.preprocess(val => {
    if (val === '' || val === null || val === undefined) return undefined;
    const num = Number(String(val).replace(/[^0-9.-]+/g, ''));
    return isNaN(num) ? undefined : num;
}, z.number().optional());

// Coerce boolean-like values.
const optionalBoolean = z.preprocess(val => {
    if (val === null || val === undefined) return undefined;
    if (typeof val === 'boolean') return val;
    const str = String(val).toLowerCase();
    return str === 'true' || str === 'yes' || str === '1';
}, z.boolean().optional());


const optionalString = z.string().optional().nullable();

// --- Zod Schemas for Enums ---
export const StatusSchema = z.enum(['Not Started', 'In Progress', 'Completed', 'On Hold', 'Cancelled']);
export const PrioritySchema = z.enum(['Low', 'Medium', 'High', 'Critical']);
export const HealthStatusSchema = z.enum(['On Track', 'At Risk', 'Off Track']);
export const LeadStatusSchema = z.enum(['New', 'Contacted', 'Qualified', 'Disqualified']);
export const OpportunityStageSchema = z.enum(['Prospecting', 'Qualification', 'Proposal', 'Negotiation', 'Closed - Won', 'Closed - Lost']);

// --- Zod Schemas for Entities ---

export const RoleSchema = z.object({
  role_name: z.string(),
  permissions: z.array(z.string()),
});

export const PersonSchema = z.object({
  user_id: z.string(),
  full_name: z.string(),
  email: z.string().email(),
  department: optionalString,
  role_title: optionalString,
  is_active: optionalBoolean,
  manager_id: optionalString,
  role_name: z.string(),
});

export const ProjectSchema = z.object({
  project_id: z.string(),
  project_name: z.string(),
  business_unit_id: stringToArray,
  owner_user_id: z.string(),
  priority: PrioritySchema,
  status: StatusSchema,
  start_date: optionalString,
  target_end_date: optionalString,
  budget_planned: optionalNumber,
  budget_spent: optionalNumber,
  objective: optionalString,
  confidence_pct: optionalNumber,
  risk_flag: optionalBoolean,
  risk_note: optionalString,
  channels_impacted: stringToArray,
  touchpoints_impacted: stringToArray,
  hub_dependencies: stringToArray,
  team_members: stringToArray,
  success_metrics: optionalString,
  created_at: optionalString,
  updated_at: optionalString,
});

export const TaskSchema = z.object({
  task_id: z.string(),
  title: z.string(),
  project_id: z.string(),
  assignee_user_id: z.string(),
  status: StatusSchema,
  priority: PrioritySchema,
  estimate_hours: optionalNumber,
  due_date: optionalString,
  description: optionalString,
  logged_hours: optionalNumber,
  channel_id: optionalString,
  touchpoint_id: optionalString,
  hub_id: optionalString,
  dependency_task_id: optionalString,
});

export const BusinessUnitSchema = z.object({
  bu_id: z.string(),
  bu_name: z.string(),
  bu_type: z.string(),
  owner_user_id: z.string(),
  health_status: HealthStatusSchema,
  priority_level: PrioritySchema,
  primary_flywheel_id: z.string(),
  upsell_flywheel_id: optionalString,
  customerType: z.string(),
  order_volume_range: z.string(),
  offering: z.string(),
  platform_type: z.string(),
  interface: z.string(),
  pricing_model: z.string(),
  avg_order_value: optionalNumber,
  target_margin_pct: optionalNumber,
  tech_build: z.string(),
  sales_motion: z.string(),
  support_type: z.string(),
  pricing_logic: z.string(),
  current_revenue: optionalNumber,
  current_orders: optionalNumber,
  variance_pct: optionalString,
  growth_rate_required: optionalNumber,
  status: z.string(),
});

export const CustomerSegmentSchema = z.object({
  customer_segment: z.string(),
  purpose: optionalString,
  vission: optionalString,
  mission: optionalString,
  expression: optionalString,
  psychological_job_to_be_done: optionalString,
  behavioral_truth: optionalString,
  brand_position_for_them: optionalString,
  messaging_tone: optionalString,
  design_pov: optionalString,
  flywheel_id: z.string(),
});

export const FlywheelSchema = z.object({
  flywheel_id: z.string(),
  flywheel_name: z.string(),
  customer_type: z.string(),
  motion: z.string(),
  primary_channels: stringToArray,
  target_revenue: optionalNumber,
  description: optionalString,
  interface: z.string(),
  customer_acquisition_motion: optionalString,
  notes: optionalString,
  order_size: z.string(),
  hub_dependencies: stringToArray,
  key_metrics: stringToArray,
  revenue_driver: optionalNumber,
  revenue_model: optionalNumber,
  what_drives_growth: optionalString,
  economics: stringToArray,
  target_orders: optionalNumber,
  avg_cac: optionalNumber,
  avg_ltv: optionalNumber,
  conversion_rate_pct: optionalNumber,
});

export const AccountSchema = z.object({
  account_id: z.string(),
  account_name: z.string(),
  industry: optionalString,
  website: optionalString,
  owner_user_id: z.string(),
});

export const OpportunitySchema = z.object({
  opportunity_id: z.string(),
  opportunity_name: z.string(),
  account_id: z.string(),
  stage: OpportunityStageSchema,
  amount: optionalNumber,
  close_date: optionalString,
  owner_user_id: z.string(),
});

export const LeadSchema = z.object({
  lead_id: z.string(),
  date: optionalString,
  full_name: z.string(),
  email: z.string().email(),
  phone: optionalString,
  brand: z.string(),
  source_channel: z.string(),
  created_at: optionalString,
  status_stage: LeadStatusSchema,
  sdr_owner_fk: z.string(),
  last_activity_date: optionalString,
  lead_score: optionalString,
  disqualified_reason: optionalString,
  source_campaign_fk: optionalString,
});

export const BrainDumpSchema = z.object({
  braindump_id: z.string(),
  timestamp: z.string(),
  type: z.string(),
  content: z.string(),
  user_email: z.string().email(),
  priority: PrioritySchema,
});

export const LogEntrySchema = z.object({
  log_id: z.string(),
  timestamp: z.string(),
  log_type: z.string(),
  content: z.string(),
  user_email: z.string().email(),
  user_name: z.string(),
  priority: PrioritySchema,
  assigned_to: z.string(),
  context: z.string(),
  success_criteria: z.string(),
  status: StatusSchema,
});

export const HubSchema = z.object({
  hub_id: z.string(),
  hub_name: z.string(),
  function_category: z.string(),
  owner_user_id: z.string(),
  what_they_enable: optionalString,
  serves_flywheel_ids: stringToArray,
  capacity_constraint: optionalBoolean,
  hiring_priority: z.string(),
  monthly_budget: optionalNumber,
  serves_bu1: optionalBoolean,
  serves_bu2: optionalBoolean,
  serves_bu3: optionalBoolean,
  serves_bu4: optionalBoolean,
  serves_bu5: optionalBoolean,
  serves_bu6: optionalBoolean,
  notes: optionalString,
});

export const InterfaceSchema = z.object({
  interface_id: z.string(),
  interface_name: z.string(),
  interface_category: z.string(),
  interface_type: z.string(),
  flywheel_id: z.string(),
  bu_ids_served: stringToArray,
  interface_owner: z.string(),
  monthly_budget: optionalNumber,
  channel_id: z.string(),
  interface_goal: optionalString,
  cost_model: optionalNumber,
  avg_cac: optionalNumber,
  avg_conversion_rate: optionalNumber,
  interface_status: z.string(),
  notes: optionalString,
  platform_id: optionalString,
});

export const ChannelSchema = z.object({
  channel_id: z.string(),
  channel_type: z.string(),
  channel_name: z.string(),
  interfaces: optionalString,
  focus: optionalString,
});

export const SystemSegmentSchema = z.object({
  segment_id: z.string(),
  segment_name: z.string(),
  customer_facing: optionalString,
  Positioning: optionalString,
  For: optionalString,
  Against: optionalString,
  Promise: optionalString,
  priority_rank: optionalString,
  customer_profile: optionalString,
  psychological_job: optionalString,
  served_by_flywheels: stringToArray,
  Platforms: optionalString,
  behavioral_truth: optionalString,
  validated_aov: optionalNumber,
  annual_orders: optionalNumber,
  contribution_margin_pct: optionalString,
  validated_cac: optionalString,
  annual_ltv: optionalNumber,
  ltv_cac_ratio: optionalString,
  validation_status: optionalString,
  owner_person: optionalString,
  owner_person_Name: optionalString,
  strategic_notes: optionalString,
  revenue_9mo_actual_inr: optionalNumber,
  '9mo_actual_orders': optionalNumber,
  annual_revenue_projected_inr: optionalNumber,
  current_customers: optionalNumber,
  avg_orders_per_customer: optionalNumber,
  revenue_share_pct: optionalNumber,
  growth_rate_target: optionalNumber,
  served_by_bus: stringToArray,
  includes_legacy_segments: optionalString,
  identity: optionalString,
  vision: optionalString,
  mission: optionalString,
  expression: optionalString,
  messaging_tone: optionalString,
  old_world_pain: optionalString,
  new_world_gain: optionalString,
  brand_position: optionalString,
  competitive_alt_1: optionalString,
  competitive_alt_2: optionalString,
  competitive_alt_3: optionalString,
  differentiated_value: optionalString,
  market_category: optionalString,
  design_pov: optionalString,
  category_entry_points: optionalString,
  buying_situations: optionalString,
  distinctive_assets: optionalString,
  age_min: optionalNumber,
  age_max: optionalNumber,
  company_size: optionalString,
  psychographic: optionalString,
  purchase_trigger_1: optionalString,
  purchase_trigger_2: optionalString,
  purchase_trigger_3: optionalString,
  current_solution_efficiency: optionalNumber,
  our_solution_efficiency: optionalNumber,
  delta_score: optionalNumber,
  adoption_threshold: optionalString,
  irreversibility_trigger: optionalString,
});

export const SystemFlywheelSchema = z.object({
  flywheel_id: z.string(),
  flywheel_name: z.string(),
  customer_struggle: optionalString,
  jtbd_trigger_moment: optionalString,
  motion_sequence: optionalString,
  serves_segments: optionalString,
  serves_bus: optionalString,
  acquisition_channels: optionalString,
  order_size_range: optionalString,
  efficiency_metrics: optionalString,
  owner_person: optionalString,
  owner_person_Name: optionalString,
  cac_target: optionalNumber,
  validation_status: optionalString,
  '9mo_actual_revenue_inr': optionalNumber,
  '9mo_actual_orders': optionalNumber,
  validated_aov_inr: optionalNumber,
  annual_revenue_target_inr: optionalNumber,
  annual_orders_target: optionalNumber,
  primary_bottleneck: optionalString,
  conversion_rate_pct: optionalNumber,
  reorder_rate_6mo_pct: optionalString,
  avg_sale_cycle_days: optionalString,
});

export const SystemBusinessUnitSchema = z.object({
  bu_id: z.string(),
  bu_name: z.string(),
  bu_type: optionalString,
  in_form_of: optionalString,
  serves_segment: optionalString,
  offering_description: optionalString,
  order_volume_range: optionalString,
  validated_aov: optionalNumber,
  target_contribution_margin: optionalNumber,
  primary_flywheel: optionalString,
  primary_flywheel_Name: optionalString,
  upsell_path: optionalString,
  pricing_model: optionalString,
  pricing_model_Name: optionalString,
  owner_person: optionalString,
  owner_rollup_name: optionalString,
  monthly_capacity_orders: optionalNumber,
  current_status: optionalString,
  '9mo_actual_revenue_inr': optionalNumber,
  '9mo_actual_orders': optionalNumber,
  annual_revenue_target_inr: optionalNumber,
  annual_orders_target: optionalNumber,
  current_utilization_pct: optionalNumber,
  sales_motion: optionalString,
  support_model: optionalString,
  production_sla_hours: optionalString,
  gross_margin_pct: optionalNumber,
  variable_cost_per_order: optionalNumber,
  fixed_costs_monthly: optionalNumber,
  break_even_orders: optionalNumber,
});

export const SystemChannelSchema = z.object({
  channel_id: z.string(),
  channel_name: z.string(),
  channel_type: optionalString,
  serves_flywheels: optionalString,
  serves_bus: optionalString,
  'Segment arrayed': optionalString,
  'Segment selected': optionalString,
  monthly_budget_inr: optionalNumber,
  cac_target: optionalNumber,
  current_cac: optionalNumber,
  cac_gap: optionalNumber,
  conversion_rate_pct: optionalNumber,
  responsible_person: optionalString,
  responsible_person_Name: optionalString,
  status: optionalString,
  Monthly_Volume: optionalNumber,
  Annual_Revenue: optionalString,
  Platform: optionalString,
  Notes: optionalString,
  LTV: optionalString,
  ROI: optionalString,
});

export const SystemInterfaceSchema = z.object({
  interface_id: z.string(),
  interface_name: z.string(),
  interface_type: optionalString,
  primary_user: optionalString,
  serves_flywheels: optionalString,
  serves_bus: optionalString,
  tech_stack: optionalString,
  owned_by_hub: optionalString,
  owned_by_hub_Name: optionalString,
  responsible_person: optionalString,
  priority_level: optionalString,
  build_status: optionalString,
  monthly_mau: optionalNumber,
  integration_points: optionalString,
  critical_to_operation: optionalString,
  bottleneck_risk: optionalString,
  annual_volume: optionalNumber,
  notes: optionalString,
  channel_id: optionalString,
});

export const SystemHubSchema = z.object({
  hub_id: z.string(),
  hub_name: z.string(),
  hub_type: optionalString,
  owner_person: optionalString,
  owner_person_Name: optionalString,
  core_capabilities: optionalString,
  team_size: optionalNumber,
  monthly_capacity_constraint: optionalString,
  current_utilization_pct: optionalNumber,
  budget_monthly_inr: optionalNumber,
  status: optionalString,
  revenue_attribution_monthly: optionalNumber,
  cost_center_or_profit: optionalString,
  interfaces_owned: optionalString,
  channels_owned: optionalString,
  primary_bottleneck: optionalString,
  scale_trigger_point: optionalString,
  Note: optionalString,
});

export const SystemPersonSchema = z.object({
  person_id: z.string(),
  full_name: z.string(),
  role: optionalString,
  primary_hub: optionalString,
  primary_hub_Name: optionalString,
  owns_flywheels: optionalString,
  owns_segments: optionalString,
  owns_bus: optionalString,
  annual_comp_inr: optionalNumber,
  capacity_utilization_pct: optionalNumber,
  primary_okrs: optionalString,
  email: optionalString,
  phone: optionalString,
  department: optionalString,
  role_title: optionalString,
  manager_id: optionalString,
  employment_type: optionalString,
  weekly_hours_capacity: optionalNumber,
  location: optionalString,
  notes: optionalString,
});

export const SystemStageSchema = z.object({
  stage_id: z.string(),
  stage_name: z.string(),
  flywheel: optionalString,
  stage_order: optionalNumber,
  stage_type: optionalString,
  serves_segments: optionalString,
  expected_conversion_rate: optionalNumber,
  current_conversion_rate: optionalNumber,
  benchmark_time: optionalString,
  current_time: optionalString,
  critical_to_revenue: optionalString,
  cumulative_conversion: optionalNumber,
  monthly_volume_in: optionalNumber,
  monthly_volume_out: optionalNumber,
  revenue_per_stage: optionalNumber,
  stage_description: optionalString,
});

export const SystemTouchpointSchema = z.object({
  touchpoint_id: z.string(),
  touchpoint_name: z.string(),
  stage: optionalString,
  flywheel: optionalString,
  customer_action: optionalString,
  serves_segments: optionalString,
  channel: optionalString,
  interface: optionalString,
  responsible_hub: optionalString,
  responsible_person: optionalString,
  success_metric: optionalString,
  target_value: optionalNumber,
  current_value: optionalNumber,
  gap_severity: optionalString,
  conversion_to_next: optionalNumber,
  drop_off_rate: optionalNumber,
  revenue_impact: optionalNumber,
  avg_time_in_stage: optionalString,
  monthly_volume: optionalNumber,
  friction_points: optionalString,
  intervention_cost: optionalNumber,
  roi_score: optionalNumber,
  optimization_priority: optionalString,
  current_status: optionalString,
});

export const SystemPlatformSchema = z.object({
  platform_id: z.string(),
  platform_name: z.string(),
  platform_type: z.string(),
  owner_hub: z.string(),
  primary_segments: optionalString,
  secondary_segments: optionalString,
  platform_icon: optionalString,
  platform_link: optionalString,
});

export const ProgramSchema = z.object({
  program_id: z.string(),
  program_name: z.string(),
  flywheel_id: optionalString,
  status: z.string(),
  priority: z.string(),
  owner_person_id: optionalString,
  owner_hub_id: optionalString,
  contributing_hub_ids: optionalString,
  serves_segment_ids: optionalString,
  linked_business_unit_ids: optionalString,
  customer_problem: optionalString,
  our_solution: optionalString,
  why_now: optionalString,
  timeline_start: optionalString,
  timeline_end: optionalString,
  success_metric: optionalString,
  target_value: optionalNumber,
  current_value: optionalNumber,
  days_total: optionalNumber,
  days_elapsed: optionalNumber,
  days_remaining: optionalNumber,
  timeline_progress_pct: optionalNumber,
  metric_progress_pct: optionalNumber,
  budget_total: optionalNumber,
  budget_spent: optionalNumber,
  budget_remaining: optionalNumber,
  budget_burn_rate_pct: optionalNumber,
  risk_level: optionalString,
  health_status: optionalString,
  blockers: optionalString,
  next_milestone: optionalString,
  next_milestone_date: optionalString,
  days_to_next_milestone: optionalNumber,
  dependent_program_ids: optionalString,
  platform_ids: optionalString,
  channel_ids: optionalString,
  projects_count: optionalNumber,
  projects_active: optionalNumber,
  projects_blocked: optionalNumber,
  projects_complete: optionalNumber,
  program_completion_pct: optionalNumber,
  tasks_total: optionalNumber,
  tasks_complete: optionalNumber,
  tasks_blocked: optionalNumber,
  created_date: optionalString,
  last_updated: optionalString,
  updated_by_person_id: optionalString,
  notes: optionalString,
  owner_person_name: optionalString,
});

export const MgmtProjectSchema = z.object({
  project_id: z.string(),
  project_name: z.string(),
  program_id: optionalString,
  program_name: optionalString,
  owner_id: optionalString,
  owner_name: optionalString,
  hub_id: optionalString,
  hub_name: optionalString,
  status: z.string(),
  priority: z.string(),
  start_date: optionalString,
  end_date: optionalString,
  budget: optionalNumber,
  dependencies: optionalString,
  success_metric: optionalString,
  revenue_impact: optionalString,
  project_type: optionalString,
  business_unit_impact: optionalString,
  segment_impact: optionalString,
  platform_id: optionalString,
  channel_ids: optionalString,
  completion_pct: optionalNumber,
  health_score: optionalString,
  actual_end_date: optionalString,
  milestones_count: optionalNumber,
  tasks_count: optionalNumber,
  tasks_complete: optionalNumber,
  tasks_in_progress: optionalNumber,
  tasks_blocked: optionalNumber,
  days_to_deadline: optionalString,
  budget_spent: optionalNumber,
  budget_variance: optionalNumber,
  velocity_tasks_per_day: optionalNumber,
  is_on_time: optionalString,
  objective: optionalString,
});

export const MilestoneSchema = z.object({
  milestone_id: z.string(),
  project_id: optionalString,
  milestone_name: z.string(),
  owner: optionalString,
  start_date: optionalString,
  target_date: optionalString,
  status: z.string(),
  completion_pct: optionalNumber,
  blocker: optionalString,
  owner_id: optionalString,
  owner_name: optionalString,
  Tasks_Count: optionalString,
  Tasks_Complete: optionalNumber,
  'Calc_Completion_%': optionalNumber,
  Days_to_Target: optionalString,
  milestone_type: optionalString,
  blocker_type: optionalString,
  dependent_milestone_ids: optionalString,
  actual_completion_date: optionalString,
});

export const MgmtTaskSchema = z.object({
  task_id: z.string(),
  project_id: optionalString,
  milestone_id: optionalString,
  task_name: z.string(),
  owner_id: optionalString,
  owner_name: optionalString,
  hub_id: optionalString,
  hub_name: optionalString,
  description: optionalString,
  priority: z.string(),
  status: z.string(),
  effort_hours: optionalNumber,
  due_date: optionalString,
  dependencies: optionalString,
  assignee_ids: optionalString,
  task_category: optionalString,
  task_type: optionalString,
  actual_completion_date: optionalString,
  notes: optionalString,
  impact_if_delayed: optionalString,
  assignee_User_id: optionalString,
});

export const MgmtHubSchema = z.object({
  team_id: z.string(),
  team_name: z.string(),
  hub_id: z.string(),
  agency_function: optionalString,
  primary_kpi: optionalString,
  budget_monthly: optionalNumber,
  headcount: optionalNumber,
});

export const WeeklyUpdateSchema = z.object({
  update_id: z.string(),
  project_id: z.string(),
  week_ending: z.string(),
  owner: z.string(),
  status_color: z.string(),
  progress_summary: z.string(),
  blockers: optionalString,
  decisions_needed: optionalString,
});

export const DecisionLogSchema = z.object({
  decision_id: z.string(),
  date: z.string(),
  decision_maker: z.string(),
  project_id: z.string(),
  decision: z.string(),
  rationale: z.string(),
  alternatives_considered: optionalString,
  impact: z.string(),
});

export const FlywheelStrategySchema = z.object({
  flywheelId: z.string(),
  flywheelName: z.string(),
  strategicRank: optionalNumber,
  positioningWeOwn: optionalString,
  bottleneckProblem: optionalString,
  servesSegments: optionalString,
  strategicAction: optionalString,
  velocityCompounding: optionalString,
  fixInvestment: optionalString,
  killCriteria: optionalString,
});

export const SegmentPositioningSchema = z.object({
  segment: z.string(),
  segmentName: z.string(),
  tagline: optionalString,
  ourPov: optionalString,
  shiftFrom: optionalString,
  shiftTo: optionalString,
});

export const FunnelStageSchema = z.object({
  stageId: z.string(),
  flywheelId: z.string(),
  stage: z.string(),
  hubName: optionalString,
  ownerName: optionalString,
  currentConv: optionalString,
  targetConv: optionalString,
  bottleneck: optionalString,
  interfaceChannel: optionalString,
});

export const InterfaceMapSchema = z.object({
  flywheel: z.string(),
  interfaceId: z.string(),
  interfaceName: z.string(),
  channelName: optionalString,
  hubName: optionalString,
  ownerName: optionalString,
  status: optionalString,
  channelId: optionalString,
});

export const AppSheetRowSchema = z.object({
  _rowIndex: z.number().optional(), // Internal helper
  spreadsheet_name: optionalString,
  spreadsheet_code: optionalString,
  spreadsheet_id: optionalString,
  sheet_name: optionalString,
  table_alias: optionalString,
}).catchall(z.any());

export const MasterSchemaRowSchema = z.object({
  _rowIndex: z.number().optional(), // Internal helper for updates
  spreadsheet_name: z.string().optional(),
  spreadsheet_code: z.string().optional(),
  spreadsheet_id: z.string().optional(),
  sheet_name: z.string().optional(),
  table_alias: z.string().optional(),
  gid: z.string().optional(),
  key_field: z.string().optional(), // Retained for compatibility if needed
  named_data_range: z.string().optional(),
  range: z.string().optional(),
  sheet_type: z.string().optional(),
  system_role: z.string().optional(),
  data_tier: z.string().optional(),
  description: z.string().optional(),
  col_index: optionalNumber,
  app_field: z.string().optional(),
  header: z.string().optional(),
  sample_value: z.string().optional(),
  detected_type: z.string().optional(),
  has_formula: optionalBoolean,
  snapshot_ts: z.string().optional(),
  data_type: z.enum(['string', 'number', 'boolean', 'string_array']).optional(),
  is_pk: z.preprocess(val => String(val).toUpperCase() === 'TRUE', z.boolean()).optional(),
  fk_ref: z.string().optional().nullable(),
}).catchall(z.any());